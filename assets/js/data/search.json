[ { "title": "HTTP概述", "url": "/posts/http-summary/", "categories": "Web开发技术", "tags": "http", "date": "2021-07-20 11:37:41 +0800", "snippet": "HTTP 协议的介绍HTTP 协议的全称是(HyperText Transfer Protocol)，翻译过来就是超文本传输协议。它规定了浏览器和 Web 服务器通信数据的格式，也就是说浏览器和web服务器通信需要使用http协议。传输 HTTP 协议格式的数据是基于 TCP 传输协议的，发送数据之前需要先建立连接。URL的概念URL的英文全拼是(Uniform Resoure Locator),表达的意思是统一资源定位符，通俗理解就是网络资源地址，也就是我们常说的网址。https://news.163.com/hello.html?page=1&amp;amp;count=10URL的..." }, { "title": "PostgreSQL常用命令", "url": "/posts/pgsql/", "categories": "数据库, PostgreSQL", "tags": "PostgreSQL", "date": "2021-07-19 22:03:41 +0800", "snippet": "一、PostgreSQL与MySQL常用命令的区别 语句 PostgreSQL MySQL 登录数据库 psql -U postgres -W mysql -uroot -p 查看数据库列表 \\list或者\\l show databases 进入某个数据库 \\c [dbname],中括号是作说明，使用时不带 use [dbname] 查看某个数据库中的数据表 \\d ..." }, { "title": "常用正则表达式", "url": "/posts/re-express/", "categories": "正则表达式", "tags": "正则表达式", "date": "2021-07-19 21:44:02 +0800", "snippet": "邮箱example-123@gmail.com 只允许英文字母、数字、下划线、英文句号、以及中划线组成^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$你好001Abc@abcdef.com.cn 名称允许汉字、字母、数字，域名只允许英文域名^[A-Za-z0-9\\u4e00-\\u9fa5]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$电话13012345678 手机号^1(3|4|5|6|7|8|9)\\d{9}$XXX-XXXXXXX XXXX-XXXXXXXX 固定电话(\\(\\d{3,4}\\)|\\d{3,4}..." }, { "title": "pyecharts饼图使用笔记", "url": "/posts/pyecharts-pie/", "categories": "数据可视化", "tags": "数据可视化, pyecharts", "date": "2021-07-18 18:58:32 +0800", "snippet": "InitOpts：初始化配置项class InitOpts( # 图表画布宽度，css 长度单位。 width: str = &quot;900px&quot;, # 图表画布高度，css 长度单位。 height: str = &quot;500px&quot;, # 图表 ID，图表唯一标识，用于在多图表时区分。 chart_id: Optional[str] = None, # 渲染风格，可选 &quot;canvas&quot;, &quot;svg&quot; # # 参考 `全局变量` 章节 renderer: str =..." }, { "title": "登录信息认证", "url": "/posts/Cookie_Session_Token_JWT/", "categories": "Web开发技术", "tags": "Web开发技术", "date": "2021-07-01 15:47:11 +0800", "snippet": "什么是认证（Authentication） 通俗地讲就是验证当前用户的身份，证明“你是你自己”（比如：你每天上下班打卡，都需要通过指纹打卡，当你的指纹和系统里录入的指纹相匹配时，就打卡成功） 互联网中的认证 用户名密码登录 邮箱发送登录链接 手机号接收验证码 只要你能收到邮箱/验证码，就默认你是账号的主人什么是授权（Authorization） 用户授予第三方应用访问该用户某些资源的权限 你在安装手机应用的时候，APP 会询问是否允许授予权限（访问相册、地理位置等权限） 你在访问微信小程序时，当登录时，小程序会询问是否允许授予权限（获取昵称、头像、地区、性别等个人信息）..." }, { "title": "Celery与RabbitMQ", "url": "/posts/celery-rabbitmq/", "categories": "Python应用框架", "tags": "celery, rabbitmq", "date": "2021-06-24 19:22:56 +0800", "snippet": "生产者消费者设计模式在工作中，大家可能会碰到这样一种情况：某个模块负责产生数据，这些数据由另一个模块来负责处理（此处的模块是广义的，可以是类、函数、线程、进程等）。产生数据的模块，就形象地称为生产者；而处理数据的模块，就称为消费者。在生产者与消费者之间在加个缓冲区，我们称之为消息队列，生产者负责往消息队列中写入消息，而消费者负责从消息队列里读取消息，这就构成了生产者消费者模型。生产者消费者模型的优点：1、解耦假设生产者和消费者分别是两个类。如果让生产者直接调用消费者的某个方法，那么生产者对于消费者就会产生依赖（也就是耦合）。将来如果消费者的代码发生变化， 可能会影响到生产者。而如果两者都..." }, { "title": "爬虫与requests库", "url": "/posts/python-spider/", "categories": "网络爬虫", "tags": "网络爬虫, requests", "date": "2021-06-20 21:11:21 +0800", "snippet": "HTTP基础网络爬虫(网页蜘蛛，网络机器人)，就是模拟客户端(主要指的的是浏览器)发送网络请求，接收请求响应，一种按照一定规则，自动的抓取互联网信息的程序HTTP请求头： User-Agent：用户代理，提供浏览器信息和系统信息 Referer：页面跳转处，指的是这个请求从哪个url页面跳转过来的 Cookie：cookie状态保持 Authorization：用于表示HTTP协议中需要认证资源的认证信息，如jwt token Host：域名 Connection：长链接keep-alive Updrade-Insecure-Requests：升级为https请求 Con..." }, { "title": "虚拟环境", "url": "/posts/virtualenv/", "categories": "环境配置", "tags": "环境配置", "date": "2020-12-11 20:22:41 +0800", "snippet": "虚拟环境依赖安装Linux/MacOS1.安装虚拟环境pip install virtualenv pip install virtualenvwrapper2.修改环境变量修改~/.bash_profile或其它环境变量相关文件(如 .bashrc 或用 ZSH 之后的 .zshrc)，添加以下语句export WORKON_HOME=$HOME/.virtualenvsexport PROJECT_HOME=$HOME/workspacesource /usr/local/bin/virtualenvwrapper.sh修改后使之立即生效(也可以重启终端使之生效)：source ~/..." }, { "title": "HTTP 响应码", "url": "/posts/http-code/", "categories": "Web开发技术", "tags": "http, Web开发技术", "date": "2020-12-01 23:38:41 +0800", "snippet": "HTTP 响应状态代码指示特定 HTTP请求是否已成功完成。响应分为五类：信息响应(100–199)，成功响应(200–299)，重定向(300–399)，客户端错误(400–499)和服务器错误 (500–599)。状态代码由 section 10 of RFC 2616定义信息响应 100 Continue 这个临时响应表明，迄今为止的所有内容都是可行的，客户端应该继续请求，如果已经完成，则忽略它。 101 Switching Protocol 该代码是响应客户端的 Upgrade (en-US) 标头发送的，并且指示服务器也正在切换的协议。 ..." }, { "title": "JavaScript基础整理", "url": "/posts/js/", "categories": "Web开发技术", "tags": "JavaScript, 前端, Web开发技术", "date": "2020-11-29 23:57:41 +0800", "snippet": "JavaScript使用方式①行内式，②内嵌式，③外链式数据类型：① number ② string ③ boolean(true和false) ④ undefined：undefined类型，变量声明未初始化，它的值就是undefined ⑤ null：null类型，表示空对象，如果定义的变量将来准备保存对象，可以将变量初始化为null,在页面上获取不到对象，返回的值就是null ⑥ object：对象类型变量声明var varname函数定义function funcName(参数){函数体}条件语句：1.比较运算符：== 等于(值相等，类型可以不等。eg,100==&#39;100..." }, { "title": "PostgreSql连接池", "url": "/posts/pgsql-pool/", "categories": "数据库, PostgreSQL", "tags": "PostgreSQL", "date": "2020-11-20 15:42:25 +0800", "snippet": "连接池的作用及原理正常访问数据库的过程中，每次访问都需要创建数据库的连接，这会消耗大量的资源；连接池的就是为数据库连接建立一个“缓冲区”，预先在缓冲池中放入一定数量的连接对象，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去；且连接池允许多个客户端使用缓存起来的连接对象，这些对象可以连接数据库，它们是共享的、可被重复使用的；使用连接池可以节省大量资源，提高程序运行速度。连接池的基本原理是：先初始化一定的数据库连接对象，并且把这些连接保存在连接池中。这些数据库连接的数量是由最小数据库连接数来设定的。连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数，当应用..." }, { "title": "WSGI &amp; uwsgi", "url": "/posts/wsgi/", "categories": "环境配置", "tags": "Django, 环境配置", "date": "2020-11-09 22:24:55 +0800", "snippet": "WSGI协议首先弄清下面几个概念： WSGI：全称是Web Server Gateway Interface，WSGI不是服务器，python模块，框架，API或者任何软件，只是一种规范，描述web server如何与web application通信的规范。server和application的规范在PEP 3333中有具体描述。要实现WSGI协议，必须同时实现web server和web application，当前运行在WSGI协议之上的web框架有Bottle, Flask, Django。 uwsgi：与WSGI一样是一种通信协议，是uWSGI服务器的独占协议，用于定义传输信息..." }, { "title": "Flask程序运行报错signal only works in main thread", "url": "/posts/flask-socketio/", "categories": "BugShooting", "tags": "Flask, BugShooting", "date": "2020-10-29 19:44:55 +0800", "snippet": "报错信息:...此处省略File &quot;/usr/lib/python3.5/signal.py&quot;, line 47, in signal handler = _signal.signal(_enum_to_int(signalnum), _enum_to_int(handler))ValueError: signal only works in main thread推测与项目中socketio有关解决方案:1.socketio 插件在使用flask run启动，出现 ValueError: signal only works in main thread 异常的..." }, { "title": "https实现原理", "url": "/posts/https/", "categories": "Web开发技术", "tags": "http, Web开发技术", "date": "2020-10-15 20:37:32 +0800", "snippet": "来源：https://www.cnblogs.com/leap/p/11953836.htmlHTTPS随着 HTTPS 建站的成本下降，现在大部分的网站都已经开始用上 HTTPS 协议。大家都知道 HTTPS 比 HTTP 安全，也听说过与 HTTPS协议相关的概念有 SSL 、非对称加密、 CA证书等，但对于以下灵魂三拷问可能就答不上了： 为什么用了 HTTPS 就是安全的？ HTTPS 的底层原理如何实现？ 用了 HTTPS 就一定安全吗？本文将层层深入，从原理上把 HTTPS 的安全性讲透。HTTPS 的实现原理大家可能都听说过 HTTPS 协议之所以是安全的是因为 HTT..." }, { "title": "centos 7.6安装MySQL5.7", "url": "/posts/centos-mysql/", "categories": "环境配置", "tags": "环境配置", "date": "2020-10-08 21:34:55 +0800", "snippet": "1.卸载默认安装的mariadbyum search mysqlyum remove mariadb.x86_642.安装wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm3.本地yum源安装yum localinstall mysql57-community-release-el7-11.noarch.rpm4.检测是否已安装yum search mysql57-community-release-el7-11.noarch.rpm5.安装yum install mysql-communi..." }, { "title": "Redis为什么这么快", "url": "/posts/redis-fast/", "categories": "数据库, Redis", "tags": "Redis", "date": "2020-09-05 14:57:32 +0800", "snippet": "基于内存实现这点在一开始就提到过了，这里再简单说说。Redis 是基于内存的数据库，那不可避免的就要与磁盘数据库做对比。对于磁盘数据库来说，是需要将数据读取到内存里的，这个过程会受到磁盘 I/O 的限制。而对于内存数据库来说，本身数据就存在于内存里，也就没有了这方面的开销。高效的数据结构Redis 中有多种数据类型，每种数据类型的底层都由一种或多种数据结构来支持。正是因为有了这些数据结构，Redis 在存储与读取上的速度才不受阻碍。这些数据结构有什么特别的地方，各位看官接着往下看：1、简单动态字符串****这个名词可能你不熟悉，换成 SDS 肯定就知道了。这是用来处理字符串的。了解 C ..." }, { "title": "详解top命令", "url": "/posts/top/", "categories": "Linux", "tags": "Linux", "date": "2020-08-05 20:37:32 +0800", "snippet": "top 能够实时显示系统中各个进程的资源占用信息，类似于Windows的任务管理器。top - 23:38:40 up 28 days, 37 min, 1 user, load average: 0.00, 0.01, 0.05 23:38:40 # 当前系统时间 up 28 days, 37 min # 从开机后运行的时间 1 user # 当前系统一个用户登录在线 load average: 0.00, 0.01, 0.05 # 1，5，15min的系统平均负载​ 第一行显示当前时间、系统的运行时间、登录的用户数、以及系统的平均负载（最近一分钟的平均负载，最近五分钟的，最近1..." }, { "title": "详解ps命令", "url": "/posts/ps/", "categories": "Linux", "tags": "Linux", "date": "2020-08-05 20:37:32 +0800", "snippet": "ps 用于报告当前系统的进程状态。 默认情况下， ps 命令只会显示运行在当前控制台下的属于当前用户的进程 ps 命令虽然在收集运行在系统上的进程信息时非常有用，但也有不足之处：它只能显示某个特定时间点的信息 F S UID PID PPID C PRI NI ADDR SZ WCHAN TTY..." }, { "title": "详解netstat命令", "url": "/posts/netstat/", "categories": "Linux", "tags": "Linux", "date": "2020-08-05 20:37:32 +0800", "snippet": "netstat 显示系统上所有的网络套接字连接情况，包括 tcp, udp 以及 unix 套接字，另外它还能列出处于监听状态（即等待接入请求）的套接字 参数 说明 -a 显示所有连线中的Socket -e 显示网络其他相关信息 -u 仅显示udp相关选项 -t 仅显示tcp相关选项 -n 直接使用IP地址，而不通过域名服务器 -l ..." }, { "title": "详解lsof命令", "url": "/posts/lsof/", "categories": "Linux", "tags": "Linux", "date": "2020-08-04 19:47:52 +0800", "snippet": "lsof lsof(list open files)命令会列出整个Linux系统打开的所有文件描述符COMMAND PID USER FD TYPE DEVICE SIZE NODE NAMEtest18 3594 rich 0u CHR 136,0 2 /dev/pts/0test18 3594 rich 1u CHR 136,0 2 /dev/pts/0test18 3594 rich 2u CHR 136,0 2 /dev/pts/018 3594 rich 3w REG 253,0 ..." }, { "title": "Ubuntu 16.04安装redis", "url": "/posts/redisInstall/", "categories": "环境配置", "tags": "环境配置", "date": "2020-07-02 10:23:00 +0800", "snippet": "安装step1: 下载 wget http://download.redis.io/releases/redis-4.0.9.tar.gzstep2: 解压 tar xzf redis-x.x.x.tar.gzstep3: 移动，放到 usr/local ⽬录下 sudo mv ./redis-x.x.x /usr/local/redis/step4: 进⼊ redis ⽬录 cd /usr/local/redis/step5: 生成 sudo makestep6: 测试,这段运⾏时间会较⻓ sudo make teststep7: 安装,将 redis 的命令安装到 /us..." }, { "title": "APScheduler", "url": "/posts/APScheduler/", "categories": "Web开发技术", "tags": "Web开发技术, APScheduler", "date": "2020-06-30 19:53:50 +0800", "snippet": "APScheduler （advanceded python scheduler）是一款Python开发的定时任务工具。特点： 不依赖于Linux系统的crontab系统定时，独立运行 可以动态添加新的定时任务 对添加的定时任务可以做持久保存文档地址 https://apscheduler.readthedocs.io/en/latest/userguide.html#starting-the-scheduler1 安装pip install apscheduler2 使用方式from apscheduler.schedulers.background import Backgro..." }, { "title": "Socket.IO", "url": "/posts/socketio/", "categories": "Web开发技术", "tags": "Web开发技术, Socket.IO", "date": "2020-03-08 14:27:00 +0800", "snippet": "传统的推送实现HTTP/1.x 不支持服务器主动推送，只能在客户端发起请求后做出回应。 （HTTP/2支持服务器主动推送，但HTTP/2 还未全面实施） 轮询 轮询是在特定的的时间间隔（如每1秒），由客户端对服务器发出HTTP请求，了解服务器有没有新的信息，然后由服务器告知有无新数据或返回最新的数据给客户端。 缺点： 效率低下，浪费资源 必须不停连接，或者连接始终打开，但传输HTTP请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。 ..." }, { "title": "Python中的垃圾回收机制", "url": "/posts/gc/", "categories": "Python, Python进阶", "tags": "Python进阶", "date": "2020-01-14 15:24:00 +0800", "snippet": "前言在老式的C/C++程序中，程序员定义了一个变量，就是在内存中开辟了一段相应的空间来存值。由于内存是有限的，所以当程序不再需要使用某个变量的时候，就需要销毁该对象并释放其所占用的内存资源，好重新利用这段空间。在C/C++中，释放无用变量内存空间的事情需要由程序员自己来处理。就是说当程序员认为变量没用了，就手动地释放其占用的内存。但是这样显然非常繁琐，如果有所遗漏，就可能造成资源浪费甚至内存泄露。当软件系统比较复杂，变量多的时候程序员往往就忘记释放内存或者在不该释放的时候释放内存了。GC:全称Garbage Collection,垃圾回收器。作为现代编程语言的自动内存管理机制，专注于两件..." }, { "title": "CDN系统", "url": "/posts/cdn/", "categories": "Web开发技术", "tags": "Web开发技术, 网络通信", "date": "2020-01-08 21:11:00 +0800", "snippet": "使用第三方OSS服务的好处是集成了CDN服务，下面来了解一下什么是CDN。CDN全称:Content Delivery Network或Content Distribute Network，即内容分发网络是将源站内容分发至最接近用户的节点，使用户可就近取得所需内容，提高用户访问的响应速度和成功率。解决因分布、带宽、服务器性能带来的访问延迟问题，适用于站点加速、点播、直播等场景。基本思路尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点..." }, { "title": "缓存模式", "url": "/posts/cache/", "categories": "Web开发技术", "tags": "Web开发技术, 数据缓存", "date": "2019-11-15 22:45:00 +0800", "snippet": "缓存模式Cache Aside更新方式 先更新数据库，再更新缓存。这种做法最大的问题就是两个并发的写操作导致脏数据。如下图（以Redis和Mysql为例），两个并发更新操作，数据库先更新的反而后更新缓存，数据库后更新的反而先更新缓存。这样就会造成数据库和缓存中的数据不一致，应用程序中读取的都是脏数据。 先删除缓存，再更新数据库。这个逻辑是错误的，因为两个并发的读和写操作导致脏数据。如下图（以Redis和Mysql为例）。假设更新操作先删除了缓存，此时正好有一个并发的读操作，没有命中缓存后从数据库中取出老数据并且更新回缓存，这个时候更新操作也完成了数据库更新。此时，数据库和缓存中的数据..." }, { "title": "雪花算法的python实现与代码解读", "url": "/posts/snowflake/", "categories": "数据结构与算法", "tags": "Web开发技术, 数据结构与算法", "date": "2019-10-24 16:33:00 +0800", "snippet": "雪花算法介绍雪花算法-Snowflake是Twitter提出来的一个用于生成分布式ID算法，其目的是生成一个64bit的整数1bit:一般是符号位，不做处理41bit:用来记录时间戳，这里可以记录69年，如果设置好起始时间比如今年是2018年，那么可以用到2089年，到时候怎么办？要是这个系统能用69年，我相信这个系统早都重构了好多次了。10bit:10bit用来记录机器ID，总共可以记录1024台机器，一般用前5位代表数据中心，后面5位是某个数据中心的机器ID12bit:循环位，用来对同一个毫秒之内产生不同的ID，12位可以最多记录4095个，也就是在同一个机器同一毫秒最多记录4095..." }, { "title": "CSRF与CORS", "url": "/posts/csrf-cors/", "categories": "Web开发技术", "tags": "Web开发技术", "date": "2019-10-10 19:56:00 +0800", "snippet": "CSRFCSRF 定义 CSRF全拼为 Cross Site Request Forgery， 译为跨站请求伪造。 CSRF指攻击者盗用了你的身份，以你的名义发送恶意请求。包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账…… 造成的问题：个人隐私泄露以及财产安全。CSRF 攻击示意图客户端访问服务器时没有同服务器做安全验证防止 CSRF 攻击 在客户端向后端请求界面数据的时候，后端会往响应中的 cookie 中设置 csrf_token 的值 在 Form 表单中添加一个隐藏的的字段，值也是 csrf_token 在用户点击提交的时候，会带上这两个值..." }, { "title": "Python 魔法方法 指南", "url": "/posts/python-magic/", "categories": "Python, Python进阶", "tags": "Python进阶", "date": "2019-09-20 17:41:00 +0800", "snippet": "什么是魔法方法呢？魔法方法就是可以给你的类增加魔力的特殊方法，如果你的对象实现（重载）了这些方法中的某一个，那么这个方法就会在特殊的情况下被 Python 所调用，你可以定义自己想要的行为，而这一切都是自动发生的。它们经常是两个下划线包围来命名的（比如__init__， __lt__ ） Ⅰ. 构造方法 __new__（cls, […]） __init__（self, […]） __del__（self） Ⅱ. 比较操作符 __cmp__(self, other) __eq__(self, other) ..." }, { "title": "logging日志模块", "url": "/posts/logging/", "categories": "Python, 标准库", "tags": "Python标准库", "date": "2019-09-11 15:33:00 +0800", "snippet": "logging日志模块记录程序日志信息的目的是: 可以很方便的了解程序的运行情况 可以分析用户的操作行为、喜好等信息 方便开发人员检查buglogging模块提供了两种记录日志的方式： 第一种方式是使用logging提供的模块级别的函数 第二种方式是使用Logging日志系统的四大组件日志等级可以分为5个，从低到高分别是: DEBUG：程序调试bug时使用 INFO：程序正常运行时使用 WARNING：程序未按预期运行时使用，但并不是错误，如:用户登录密码错误 ERROR：程序出错误时使用，如:IO操作失败 CRITICAL：特别严重的问题，导致程序不能再继续运行时使..." }, { "title": "BitMap位图概述", "url": "/posts/bitmap/", "categories": "数据结构与算法", "tags": "数据结构与算法", "date": "2019-08-12 18:58:00 +0800", "snippet": "通过一个bit数组来存储特定数据的一种数据结构,每一个bit位都能独立包含信息,bit是数据的最小存储单元,因此能大量节省空间按下标从数组的高位(左)向低位(右)取值,bit数组起始值全为0,从左到右取下标(下标从0开始),数组的每个元素值就是一个下标值.将元素对应的下标在bit位上的值改为1举例:数组[2,5,3,8] 起始000000000 元素2对应下标2,将左到右的下标2的值改为1 –&amp;gt; 001000000还能顺便把列表排序了.新加入一个元素,只需要将已有的bit数组和新加入的数字做按位或(or)计算 例如:[2,5,3,8] 001101001 新加..." }, { "title": "python包管理工具pip", "url": "/posts/pip/", "categories": "生产工具", "tags": "生产工具, 环境配置", "date": "2019-08-05 20:37:32 +0800", "snippet": "1. 查询软件包查询当前环境安装的所有软件包$ pip list查询 pypi 上含有某名字的包$ pip search pkg查询当前环境中的包$ pip list查询一个包的详细内容$ pip show pkg2. 下载软件包在不安装软件包的情况下下载软件包到本地$ pip download --destination-directory /local/wheels -r requirements.txt下载完，总归是要安装的，可以指定这个目录中安装软件包，而不从 pypi 上安装。$ pip install --no-index --find-links=/local/wheels..." }, { "title": "Elasticsearch-3", "url": "/posts/es3/", "categories": "数据库", "tags": "Elasticsearch, Web开发技术", "date": "2019-07-28 17:18:00 +0800", "snippet": "查询1 基本查询 根据文档ID curl -X GET 127.0.0.1:9200/articles/article/1 curl -X GET 127.0.0.1:9200/articles/article/1?_source=title,user_id curl -X GET 127.0.0.1:9200/articles/article/1?_source=false 查询所有 curl -X GET 127.0.0.1:9200/articles/article/_search?_source=title,..." }, { "title": "关于加密", "url": "/posts/guan-yu-jia-mi/", "categories": "计算机基础", "tags": "计算机基础", "date": "2019-07-22 12:44:00 +0800", "snippet": "加密保障信息安全的一部分 信息安全主要包括： 防止窃听 防止篡改 防止抵赖 防止回放加密算法的分类两类半-摘要算法严格来说不是 对称加密：加密和解密的时候用到的密钥是一样的(无法防止抵赖) 非对称加密：加密和解密的时候用到的密钥是不一样的(密钥是成对的) 密钥：公钥(公开)，私钥(私有) 密钥空间：密文的可能值，表示一种密文的所有可能性非对称加密算法：RSA，DSA/DSS 在客户端与服务端相互验证的过程中用的是对称加密 对称加密算法：AES，RC4，3DES 客户端与服务端相互验证通过后，以随机数作为密钥时，就是对称加密HASH算法：MD5，SHA1，..." }, { "title": "Elasticsearch-2", "url": "/posts/es2/", "categories": "数据库", "tags": "Elasticsearch, Web开发技术", "date": "2019-07-15 13:54:00 +0800", "snippet": "索引与类型索引查看索引curl 127.0.0.1:9200/_cat/indices 请求curl 127.0.0.1:9200/_cat可获取用于查询的名称创建索引索引可以在添加文档数据时，通过动态映射的方式自动生成索引与类型。索引也可以手动创建，通过手动创建，可以控制主分片数目、分析器和类型映射。PUT /my_index{ &quot;settings&quot;: { ... any settings ... }, &quot;mappings&quot;: { &quot;type_one&quot;: { ... any mappings ......" }, { "title": "gunicorn与uwsgi项目部署", "url": "/posts/xiang-mu-bu-shu/", "categories": "环境配置", "tags": "环境配置", "date": "2019-07-11 15:21:00 +0800", "snippet": "gunicornGunicorn（绿色独角兽）是一个Python WSGI的HTTP服务器。从Ruby的独角兽（Unicorn ）项目移植。该Gunicorn服务器与各种Web框架兼容，实现非常简单，轻量级的资源消耗。Gunicorn直接用命令启动，不需要编写配置文件安装gunicornpip install gunicorn查看命令行选项： 安装gunicorn成功后，通过命令行的方式可以查看gunicorn的使用信息。$ gunicorn -h直接运行：#直接运行，默认启动的127.0.0.1::8000gunicorn 运行文件名称:程序实例名指定进程和端口号： -w: 表示进程（..." }, { "title": "Elasticsearch-1", "url": "/posts/ES1/", "categories": "数据库", "tags": "Elasticsearch, Web开发技术", "date": "2019-07-08 17:17:00 +0800", "snippet": "简介与原理1 简介Elasticsearch是一个基于Lucene库的搜索引擎。它提供了一个分布式、支持多用户的全文搜索引擎，具有HTTP Web接口和无模式JSON文档。所有其他语言可以使用 RESTful API 通过端口 *9200* 和 Elasticsearch 进行通信Elasticsearch是用Java开发的，并在Apache许可证下作为开源软件发布。官方客户端在Java、.NET（C#）、PHP、Python、Apache Groovy、Ruby和许多其他语言中都是可用的。Elasticsearch可以用于搜索各种文档。它提供可扩展的搜索，具有接近实时的搜索，并支持多租..." }, { "title": "random模块", "url": "/posts/random/", "categories": "Python, 标准库", "tags": "Python标准库", "date": "2019-06-28 14:44:00 +0800", "snippet": "random模块该模块实现了各种分布的伪随机数生成器random.randrange(start, stop[, step]) 从 range(start, stop, step) 返回一个随机选择的元素。 这相当于 choice(range(start, stop, step)) ，但实际上并没有构建一个 range 对象。 random.randint(a, b) 返回随机整数 N 满足 a &amp;lt;= N &amp;lt;= b。相当于 randrange(a, b+1)。 random.choice(seq) 从非空序列 seq 返回一个随机..." }, { "title": "contextlib模块", "url": "/posts/contextlib/", "categories": "Python, 标准库", "tags": "Python标准库", "date": "2019-06-18 16:24:00 +0800", "snippet": "contextlib模块上下文管理器任何实现了 enter() 和 exit() 方法的对象都可称之为上下文管理器，上下文管理器对象可以使用 with 关键字。enter() 方法返回资源对象，这里就是你将要打开的那个文件对象，exit() 方法处理一些清除工作。class File(): def __init__(self, filename, mode): self.filename = filename self.mode = mode def __enter__(self): print(&quot;entering&quot..." }, { "title": "pickle与base64模块", "url": "/posts/base64/", "categories": "Python, 标准库", "tags": "Python标准库", "date": "2019-06-12 14:34:00 +0800", "snippet": "base64模块Base64是一种用64个字符来表示任意二进制数据的方法Base64的原理很简单，首先，准备一个包含64个字符的数组：[‘A’, ‘B’, ‘C’, … ‘a’, ‘b’, ‘c’, … ‘0’, ‘1’, … ‘+’, ‘/’][‘A’, ‘B’, ‘C’, … ‘a’, ‘b’, ‘c’, … ‘0’, ‘1’, … ‘-‘, ‘_’] 这个是基于url safe的编码然后，对二进制数据进行处理，每3个字节一组，一共是3x8=24bit，划为4组，每组正好6个bit：这样我们得到4个数字作为索引，然后查表，获得相应的4个字符，就是编码后的字符串。所以，Base64..." }, { "title": "calendar模块", "url": "/posts/calendar/", "categories": "Python, 标准库", "tags": "Python标准库", "date": "2019-06-09 20:38:00 +0800", "snippet": "calendar模块此模块的函数都是日历相关的，例如打印某月的字符月历。星期一是默认的每周第一天，星期天是默认的最后一天。calendar.calendar(year,w=2,l=1,c=6) 该函数返回某年的日历，3个月一行，间隔距离为c。 每日宽度间隔为w字符。每行长度为21* W+18+2* C。l是每星期行数。calendar.month(year,month,w=2,l=1) 该函数返回某年某月的日历。两行标题，一周一行。每日宽度间隔为w字符。每行的长度为7* w+6。l是每星期的行数。calendar.isleap(year) 该函数可以判断某年是不是闰年c..." }, { "title": "datetime模块", "url": "/posts/datatime/", "categories": "Python, 标准库", "tags": "Python标准库", "date": "2019-06-09 20:19:00 +0800", "snippet": "datetime模块一. datetime模块介绍datetime模块包含如下类： date：日期对象,属性有year, month, day time：时间对象, 属性有hour, minute, second, microsecond,和tzinfo。 datetime：日期时间对象,属性：year, month, day, hour, minute, second, microsecond,和tzinfo. timedelta：表示两个时间对象的时间间隔，即两个时间点之间的长度,精确到微秒 datetime模块中包含的常量 MAXYEAR：返回能表示的最大年份，date..." }, { "title": "time模块", "url": "/posts/time/", "categories": "Python, 标准库", "tags": "Python标准库", "date": "2019-06-09 20:05:00 +0800", "snippet": "time模块属性： time.timezone是当地时区（未启动夏令时）距离格林威治的偏移秒数（&amp;gt;0，美洲;&amp;lt;=0大部分欧洲，亚洲，非洲）。 time.tzname包含一对根据情况的不同而不同的字符串，分别是带夏令时的本地时区名称，和不带的。时间间隔以秒为单位时间戳都以自从 1970 年 1 月 1 日午夜（历元）经过了多长时间来表示。如1540808367.8872325时间元组struct_time(tm_year, tm_mon, tm_mday, tm_hour, tm_min, tm_sec, tm_wday, tm_yday, tm_isdst..." }, { "title": "CentOS7下部署Django", "url": "/posts/django-bushu/", "categories": "Django", "tags": "Django, 环境配置", "date": "2019-06-08 21:34:55 +0800", "snippet": "CentOS7下部署Django项目一、更新系统软件包yum update -y二、安装软件管理包和可能使用的依赖yum -y groupinstall &quot;Development tools&quot;yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel psmisc libffi-devel三、下载Pyhton3到/usr/local 目录**cd /usr/localwget https://www.python.org/ftp/python/3.6...." }, { "title": "Django身份认证系统", "url": "/posts/django-auth/", "categories": "Django", "tags": "Django", "date": "2019-06-08 21:34:55 +0800", "snippet": "Django 中的身份认证Django 带有一个用户认证系统。用于处理用户帐户，组，权限和基于 cookie 的用户会话。本文档的这一部分解释了默认实现如何开箱即用，以及如何扩展和定制它以适应您的项目需求。概览认证系统由以下部分组成： 用户(Users) 权限(Permissions)：标志指定用户是否可以执行特定任务。 组(Groups)：将标签和权限应用于多个用户的通用方式。 一个可配置的密码散列系统 表单和查看工具，用于登录用户或限制内容 可插入的后端系统Django 中的认证系统的目标是非常通用，并且不提供 Web 认证系统中常见的一些功能。第三方软件包已经实施了一些..." }, { "title": "Django-ORM常用操作", "url": "/posts/django-orm/", "categories": "Django", "tags": "Django", "date": "2019-06-07 20:44:32 +0800", "snippet": "model update常规用法假如我们的表结构是这样的class User(models.Model): username = models.CharField(max_length=255, unique=True, verbose_name=&#39;用户名&#39;) is_active = models.BooleanField(default=False, verbose_name=&#39;激活状态&#39;)那么我们修改用户名和状态可以使用如下两种方法：方法一：User.objects.filter(id=1).update(username=&#39;nic..." }, { "title": "Django常用命令介绍", "url": "/posts/django-cmd/", "categories": "Django", "tags": "Django", "date": "2019-06-06 19:57:32 +0800", "snippet": "在DJango里django-admin.py和manage.py都是Django的命令工具集，用于处理系统管理相关操作，而manage.py是在创建Django工程时自动生成的，manage.py是对django-admin.py的简单包装，二者的作用基本一致。区别：1、django-admin存放在Python的site-packages\\django\\bin 里，manage.py存放在项目工程文件夹里。2、django-admin可以对不同的项目进行设置，而manege.py只能当前的工程有效。下面我们以manage.py为例，列出一些常用的命令：django-admin &am..." }, { "title": "hashlib模块", "url": "/posts/hashlib/", "categories": "Python, 标准库", "tags": "Python标准库", "date": "2019-06-01 23:23:00 +0800", "snippet": "hashlib模块Python的hashlib提供了常见的摘要算法，如MD5，SHA1等等。摘要算法又称哈希算法、散列算法。它通过摘要函数f()对任意长度的数据data计算出固定长度的摘要digest，目的是为了发现原始数据是否被人篡改过。摘要算法之所以能指出数据是否被篡改过，就是因为摘要函数是一个单向函数，计算f(data)很容易，但通过digest反推data却非常困难。而且，对原始数据做一个bit的修改，都会导致计算出的摘要完全不同。MD5是最常见的摘要算法，速度很快，生成结果是固定的128 bit字节，通常用一个32位的16进制字符串表示。计算出一个字符串的MD5值：import..." }, { "title": "单元测试", "url": "/posts/unittest/", "categories": "Python, 标准库", "tags": "Python标准库", "date": "2019-05-20 01:16:00 +0800", "snippet": "为什么要测试Web程序开发过程一般包括以下几个阶段：[需求分析，设计阶段，实现阶段，测试阶段]。其中测试阶段通过人工或自动来运行测试某个系统的功能。目的是检验其是否满足需求，并得出特定的结果，以达到弄清楚预期结果和实际结果之间的差别的最终目的。测试的分类测试从软件开发过程可以分为： 单元测试 对单独的代码块(例如函数)分别进行测试,以保证它们的正确性 集成测试 对大量的程序单元的协同工作情况做测试 系统测试 同时对整个系统的正确性进行检查,而不是针对独立的片段 什么是单元测试程序开发过程中，写代..." }, { "title": "re模块--正则表达", "url": "/posts/re/", "categories": "Python, 标准库", "tags": "Python标准库, 正则表达式", "date": "2019-05-15 14:22:00 +0800", "snippet": "re模块正则表达式是匹配符合某些规则的字符串数据。在python中需要通过正则表达式对字符串进行匹配的时候，可以使用re模块import rere.match(pattern, string, flags=0) 从字符串的起始位置匹配一个模式，匹配成功返回一个匹配的对象MatchObject，否则返回None。flags : 编译时用的匹配模式，数字形式，具体参考最下边。提取数据用group()和groups() re.search(pattern, string, flags=0) 扫描整个字符串并返回第一个成功的匹配。匹配成功返回一个匹配的对象MatchOb..." }, { "title": "字符编码", "url": "/posts/bytes-encode-decode/", "categories": "计算机基础", "tags": "计算机基础", "date": "2019-05-07 16:44:00 +0800", "snippet": "位、字节、字符的区别位（bit）：是计算机 内部数据 储存的最小单位，11001100是一个八位二进制数。字节（byte）：是计算机中 数据处理 的基本单位，习惯上用大写 B 来表示,1B（byte,字节）= 8bit（位）字符：是指计算机中使用的字母、数字、字和符号计算机中的CPU位数指的是CPU一次能处理的最大位数。例如32位计算机的CPU一次最多能处理32位数据。ASCIIS码： 1个英文字母（不分大小写）= 1个字节的空间1个中文汉字 = 2个字节的空间1个ASCII码 = 一个字节Unicode编码： 1个英文字符 = 2个字节英文标点 = 2个字节1个中文（含繁体）..." }, { "title": "整数-小数-负数的存储", "url": "/posts/int-decimal-long/", "categories": "计算机基础", "tags": "计算机基础", "date": "2019-04-12 18:13:00 +0800", "snippet": "计算机中整数的存储用几个字节来表示一个整数？ byte型1字节 short型2字节 int型4字节 long型8字节不带符号的整数(0和正数)byte型1字节 0000 0000 表示的整数0 ~ 255short型2字节 0000 0000 0000 0000 表示整数0 ~ 65535int型4字节 0000 0000 0000 0000 0000 0000 0000 0000 表示整数0 ~ 4,294,967,295long型8字节 00000000 00000000 00000000 00000000 00000000 00000000 00000000..." }, { "title": "计算机中的负数为什么使用补码表示", "url": "/posts/ned_num-exp-in-computer/", "categories": "计算机基础", "tags": "计算机基础", "date": "2019-04-02 15:47:38 +0800", "snippet": "我们都知道，在计算机的内部，所有的数据都是以二进制的形式存储的，为了区分正数和负数，在最高位拿出来当作符号位，0表示正数，1表示负数。而且，负数的存储，除了最高位的符号位，其他位使用的是补码的形式存储的。计算一个数值的二进制补码，以下3个步骤：求这个值的绝对值的二进制原码原码取反，得到反码反码加1，即是补码例如，要求-18的二进制码，首先求18的二进制码：0000 0000 0000 0000 0000 0000 0001 0010求其反码：1111 1111 1111 1111 1111 1111 1110 1101最后反码加11111 1111 1111 1111 1111 1111..." }, { "title": "FastDFS文件存储", "url": "/posts/fastdfs/", "categories": "Web开发技术", "tags": "Web开发技术", "date": "2019-03-18 13:22:16 +0800", "snippet": "FastDFS介绍 用c语言编写的一款开源的轻量级分布式文件系统。 功能包括：文件存储、文件访问（文件上传、文件下载）、文件同步等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。 为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标。 可以帮助我们搭建一套高性能的文件服务器集群，并提供文件上传、下载等服务。 FastDFS架构 包括Client、Tracker server和Storage server。Client请求Tracker进行文件上传、下载，Tracker再调度Storage完成文件..." }, { "title": "计算机工作原理概述", "url": "/posts/computer-science/", "categories": "计算机基础", "tags": "计算机基础", "date": "2019-03-11 18:33:54 +0800", "snippet": "为解决各种问题，人们发明了不计其数的机器。计算机种类繁多，从嵌入火星漫游机器人的计算机到为操纵核潜艇导航系统的计算机，不一而足。冯• 诺伊曼在1945 年提出第一种计算模型，无论笔记本电脑还是电话，几乎所有计算机都遵循与这种模型相同的工作原理。那么计算机是如何工作的？本文将讨论这些内容：◎ 理解计算机体系结构的基础知识◎ 选择编译器将代码转换为计算机可以执行的指令◎ 根据存储器层次结构提高数据的存储速度体系结构计算机是一种根据指令操作数据的机器，主要由处理器与存储器两部分组成。存储器又称RAM（随机存取存储器），用于存储指令以及需要操作的数据。处理器又称CPU（中央处理器），它从存储器获..." }, { "title": "Python笔记", "url": "/posts/python-base/", "categories": "Python, Python基础", "tags": "Python基础, Python进阶", "date": "2019-02-15 23:37:41 +0800", "snippet": "列表 ListaList.append(obj)在列表末尾追加元素，等同于 aList[len(aList）:len(aList)] = [obj]aList.clear()删除 aList 的所有元素aList.count(obj)返回 aList 中与 obj 相等的元素个数aList.copy()返回 aList 的副本。请注意，这是浅复制，即不会复制元素aList.extend(sequence)将sequence中的元素逐个追加到列表当中，等同于 aList[len(aList):len(aList)] = sequenceaList.index(obj)返回 aList 中第..." }, { "title": "property属性", "url": "/posts/property/", "categories": "Python, Python进阶", "tags": "Python进阶", "date": "2019-02-01 23:37:41 +0800", "snippet": "property属性Python内置的@property装饰器就是负责把一个方法变成属性调用property属性的定义和调用要注意一下几点：定义时，在实例方法的基础上添加 @property 装饰器；并且仅有一个self参数调用时，无需括号两种方式：装饰器 即：在方法上应用装饰器类属性 即：在类中定义值为property对象的类属性装饰器方式在类的实例方法上应用@property装饰器class Goods: &quot;&quot;&quot;python3中默认继承object类 以python2、3执行此程序的结果不同，因为只有在python3中才有@xxx.s..." }, { "title": "Django基础", "url": "/posts/django-note/", "categories": "Django", "tags": "Web开发技术, Django", "date": "2019-01-06 19:14:46 +0800", "snippet": "Web框架的意义 用于搭建web应用程序 免去不同 Web 应用相同代码部分的重复编写，只需关心 Web 应用核心的业务逻辑实现Web应用程序的本质 接收并解析 HTTP 请求 ，获取具体的请求信息 处理本次 HTTP 请求 ，即完成本次请求的业务逻辑处理 构造并返回处理结果 —— HTTP 响应1.Django介绍 Django 是一款重量级框架, 内部架构使用的是 MVT 设计模式. 对比 Flask 框架，Django 原生提供了众多的功能组件，让开发更简便快速。 提供项目工程管理的自动化脚本工具( 脚手架工具 ) 数据库 ORM 支持（对象关系映射，英语：Obj..." }, { "title": "os模块", "url": "/posts/os-module/", "categories": "Python, 标准库", "tags": "Python标准库", "date": "2019-01-01 20:42:57 +0800", "snippet": "OS模块该模块提供了一些方便使用操作系统相关功能的函数。模块变量os.name导入依赖操作系统模块的名字，指示你正在使用的平台。如果是posix，说明系统是Linux、Unix或Mac OS X，如果是nt，就是Windows系统。os.linesep当前平台上的换行符字符串. 在POSIX上是’\\n’,或者 在Windows上是’\\r\\n’ . 不要使用 os.linesep作为换行符，当写入文本文件时 (默认); 使用’\\n’代替, 在所有平台上。os.environ一个mapping对象表示操作系统中定义的环境变量。例如，environ[‘HOME’] ，表示的你自己home文件夹..." }, { "title": "sys模块", "url": "/posts/sys-module/", "categories": "Python, 标准库", "tags": "Python标准库", "date": "2019-01-01 20:33:05 +0800", "snippet": "OS模块该模块提供了一些方便使用操作系统相关功能的函数。模块变量os.name导入依赖操作系统模块的名字，指示你正在使用的平台。如果是posix，说明系统是Linux、Unix或Mac OS X，如果是nt，就是Windows系统。os.linesep当前平台上的换行符字符串. 在POSIX上是’\\n’,或者 在Windows上是’\\r\\n’ . 不要使用 os.linesep作为换行符，当写入文本文件时 (默认); 使用’\\n’代替, 在所有平台上。os.environ一个mapping对象表示操作系统中定义的环境变量。例如，environ[‘HOME’] ，表示的你自己home文件夹..." }, { "title": "闭包与装饰器", "url": "/posts/decorater/", "categories": "Python, Python进阶", "tags": "Python进阶", "date": "2018-12-05 19:23:41 +0800", "snippet": "闭包在函数嵌套的前提下，内部函数使用了外部函数的变量，并且外部函数返回了内部函数，我们把这个使用外部函数变量的内部函数称为闭包。闭包的形成条件 在函数嵌套(函数里面再定义函数)的前提下 内部函数使用了外部函数的变量(还包括外部函数的参数) 外部函数返回了内部函数 # 定义一个外部函数def func_out(num1): # 定义一个内部函数 def func_inner(num2): nonlocal num1 # 告诉解释器，此处使用的是 外部变量a # 修改外部变量num1 num1 =..." }, { "title": "命名空间和作用域", "url": "/posts/name-space/", "categories": "Python, Python进阶", "tags": "Python进阶", "date": "2018-12-01 23:37:41 +0800", "snippet": "三种命名空间内置名称（built-in names），Python 语言内置的名称，比如函数名 abs、char 和异常名称 BaseException、Exception 等等。全局名称(global names),模块中定义的名称，记录了模块的变量,包括函数、类、其它导入的模块、模块级的变量和常量。局部名称(local names),函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量。（类中定义的也是）命名空间查找顺序:局部的命名空间去 -&amp;gt; 全局命名空间 -&amp;gt; 内置命名空间。如果找不到变量 runoob，它将放弃查找并引发一个 NameE..." }, { "title": "Linux常用命令", "url": "/posts/Linux-command/", "categories": "Linux", "tags": "Linux", "date": "2018-11-11 22:16:37 +0800", "snippet": " 通配符 含义 * 文件代表文件名中所有字符 ？ 代表文件名中任意一个字符 [] [”和“]”将字符组括起来，表示可以匹配字符组中的任意一个。“-”用于表示字符范围 \\ 如果要使通配符作为普通字符使用，可以在其前面加上转义字符。“?”和“*”处于方括号内时不用使用转义字符就失去通配符的作用。 man &amp;amp; –help$ command [-options] [parameter] ..." }, { "title": "文件操作", "url": "/posts/file-operate/", "categories": "Python, Python基础", "tags": "Python基础", "date": "2018-10-24 22:38:16 +0800", "snippet": "open()函数open() 方法用于打开一个文件，并返回文件对象，在对文件进行处理过程都需要使用到这个函数,如果该文件无法被打开，会抛出 OSError。基本语法格式如下:open(file, mode) # 简写语法open(file, mode=’r’, buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None) file：一个 path-like object，表示将要打开的文件的路径。mode：决定了打开文件的模式：只读，写入，追加等。这个参数是非强制的，默认文件访问模..." }, { "title": "Time,Datetime,Calendar模块", "url": "/posts/time-datetime/", "categories": "Python, 标准库", "tags": "Python标准库", "date": "2018-10-10 19:07:44 +0800", "snippet": "datetime模块一. datetime模块介绍datetime模块包含如下类： date：日期对象,属性有year, month, day time：时间对象, 属性有hour, minute, second, microsecond,和tzinfo。 datetime：日期时间对象,属性：year, month, day, hour, minute, second, microsecond,和tzinfo. timedelta：表示两个时间对象的时间间隔，即两个时间点之间的长度,精确到微秒 datetime模块中包含的常量 MAXYEAR：返回能表示的最大年份，date..." }, { "title": "python3内置函数", "url": "/posts/built-in-function/", "categories": "Python, Python基础", "tags": "Python基础", "date": "2018-09-25 22:16:07 +0800", "snippet": "abs(number)返回数字的绝对值all(iterable)如果 iterable 的所有元素都为真值，就返回 True ；否则返回 Falseany(iterable)如果 iterable 的所有元素都为假值，就返回 False ；否则返回 Trueascii(object)ascii() 函数类似 repr() 函数, 返回一个表示对象的字符串, 但是对于字符串中的非 ASCII 字符则返回通过 repr() 函数使用 \\x, \\u 或 \\U 编码的字符。bin(integer)将整数转换为以字符串表示的二进制字面量bool(x)将 x 解读为布尔值，并返回 True 或 Fa..." }, { "title": "Python中的赋值_引用_拷贝_传参", "url": "/posts/copy-reference/", "categories": "Python, Python进阶", "tags": "Python进阶", "date": "2018-09-09 18:57:42 +0800", "snippet": "1.赋值 VS 引用我们都知道Python的赋值运算符是“=”，如：&amp;gt;&amp;gt;&amp;gt; a = 1&amp;gt;&amp;gt;&amp;gt; b = a&amp;gt;&amp;gt;&amp;gt; b&amp;gt;&amp;gt;&amp;gt; 1&amp;gt;&amp;gt;&amp;gt; id(a)&amp;gt;&amp;gt;&amp;gt; 10432856&amp;gt;&amp;gt;&amp;gt; id(b)&amp;gt;&amp;gt;&amp;gt; 10432856id函数可以获得对象的内存地址。很明显从上面例子可..." }, { "title": "Json模块", "url": "/posts/json-module/", "categories": "Python, 标准库", "tags": "Python标准库", "date": "2018-08-27 20:37:06 +0800", "snippet": "JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它使得人们很容易的进行阅读和编写。同时也方便了机器进行解析和生成。它是基于 JavaScript Programming Language , Standard ECMA-262 3rd Edition - December 1999 的一个子集。 JSON采用完全独立于程序语言的文本格式，但是也使用了类C语言的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。这些特性使JSON成为理想的数据交换语言。JSON基于两种结构json简单说就是jav..." }, { "title": "pickle模块", "url": "/posts/pickle-module/", "categories": "Python, 标准库", "tags": "Python标准库", "date": "2018-08-27 20:16:33 +0800", "snippet": "模块 pickle 实现了对一个 Python 对象结构的二进制序列化和反序列化。 “pickling” 是将 Python 对象及其所拥有的层次结构转化为一个字节流的过程，而 “unpickling” 是相反的操作，会将（来自一个 binary file 或者 bytes-like object 的）字节流转化回一个对象层次结构。与 json 模块的比较JSON 是一个文本序列化格式（它输出 unicode 文本，尽管在大多数时候它会接着以 utf-8 编码），而 pickle 是一个二进制序列化格式；JSON 是我们可以直观阅读的，而 pickle 不是；JSON是可互操作的，在Py..." }, { "title": "Markdown语法简介", "url": "/posts/chinese-markdown-cheatsheet/", "categories": "生产工具", "tags": "生产工具", "date": "2018-08-18 19:22:28 +0800", "snippet": "本中文版Markdown语法简介来自博客 https://blog.shengbin.me/posts/markdown-syntaxMarkdown语法的完整介绍在这里：http://daringfireball.net/projects/markdown/syntax。下面整理的这些为了方便写博客时参考。分段与分行以一个或多个空行来隔开段落；以两个或多个空格来段内换行。标题This is an H1=============This is an H2-------------# This is an H1## This is an H2###### This is an H6引用..." }, { "title": "内置数据类型常用方法", "url": "/posts/build-in-type/", "categories": "Python, Python基础", "tags": "Python基础", "date": "2018-07-29 20:06:11 +0800", "snippet": "列表 ListaList.append(obj)在列表末尾追加元素，等同于 aList[len(aList）:len(aList)] = [obj]aList.clear()删除 aList 的所有元素aList.count(obj)返回 aList 中与 obj 相等的元素个数aList.copy()返回 aList 的副本。请注意，这是浅复制，即不会复制元素aList.extend(sequence)将sequence中的元素逐个追加到列表当中，等同于 aList[len(aList):len(aList)] = sequenceaList.index(obj)返回 aList 中第..." }, { "title": "timeit模块", "url": "/posts/timeit/", "categories": "Python, 标准库", "tags": "Python标准库", "date": "2018-07-16 22:13:45 +0800", "snippet": "timeit模块该模块提供了一种简单的方法来计算一小段 Python 代码的耗时。它有 命令行界面 以及一个 可调用 方法。它避免了许多用于测量执行时间的常见陷阱。两个函数timeit.timeit(stmt=&#39;pass&#39;, setup=&#39;pass&#39;, timer=&amp;lt;defaulttimer&amp;gt;, number=1000000) 返回： 返回执行stmt这段代码number遍所用的时间，单位为秒，float型 参数： stmt：要执行的那段代码 setup：执行代码的准备工作，..." }, { "title": "分布式ID", "url": "/posts/fen-bu-shi-id/", "categories": "Web开发技术", "tags": "数据结构与算法, Web开发技术", "date": "2018-07-07 22:31:09 +0800", "snippet": "UUIDUUID是通用唯一识别码（Universally Unique Identifier)的缩写，开放软件基金会(OSF)规范定义了包括网卡MAC地址、时间戳、名字空间（Namespace）、随机或伪随机数、时序等元素。利用这些元素来生成UUID。UUID是由128位二进制组成，一般转换成十六进制，然后用String表示。 550e8400-e29b-41d4-a716-446655440000UUID的优点: 通过本地生成，没有经过网络I/O，性能较快 无序，无法预测他的生成顺序。(当然这个也是他的缺点之一)UUID的缺点: 128位二进制一般转换成36位的16进制，太长了..." }, { "title": "IP地址的分类", "url": "/posts/ip/", "categories": "网络通信", "tags": "网络通信, 计算机基础", "date": "2018-07-07 21:44:16 +0800", "snippet": "ip地址用来在网络中标记一台电脑，比如192.168.1.1；在本地局域网上是唯一的。ip地址的分类每一个IP地址包括两部分：网络地址和主机地址A类IP地址一个A类IP地址由1字节的网络地址和3字节主机地址组成，网络地址的最高位必须是“0”，地址范围1.0.0.1-126.255.255.254二进制表示为：00000001 00000000 00000000 00000001 - 01111110 11111111 11111111 11111110可用的A类网络有126个，每个网络能容纳1677214个主机B类IP地址一个B类IP地址由2个字节的网络地址和2个字节的主机地址组成，网络..." }, { "title": "collections模块", "url": "/posts/collections/", "categories": "Python, 标准库", "tags": "Python标准库", "date": "2018-06-26 21:17:22 +0800", "snippet": "collections模块class collections.deque([iterable[,maxlen]]) 返回一个新的双向队列对象，从左到右初始化(用方法 append()) ，从 iterable （迭代对象) 数据创建。如果 iterable 没有指定，新队列为空。如果 maxlen 没有指定或者是 None ，deques 可以增长到任意长度。否则，deque就限定到指定最大长度。一旦限定长度的deque满了，当新项加入时，同样数量的项就从另一端弹出。 Deque队列是由栈或者queue队列生成的.在队列两端插入或删除元素时间复杂度都是 O(1) ，而在列表的开头插入..." }, { "title": "TCP与UDP", "url": "/posts/tcp-ip-socket/", "categories": "计算机基础", "tags": "网络通信, Python进阶, 计算机基础", "date": "2018-06-18 20:56:47 +0800", "snippet": "简介IP地址用来在网络中标记一台电脑，比如192.168.1.1；在本地局域网上是唯一的。IP地址实际上是一个32位整数（称为IPv4），以字符串表示的IP地址如192.168.0.1实际上是把32位整数按8位分组后的数字表示，目的是便于阅读。IPv6地址实际上是一个128位整数，它是目前使用的IPv4的升级版，以字符串表示类似于2001:0db8:85a3:0042:1000:8a2e:0370:7334。端口端口是通过端口号来标记的，端口号只有整数，范围是从0到65535（2的16次方）。知名端口是众所周知的端口号，范围从0到1023；80端口分配给HTTP服务，21端口分配给FTP..." }, { "title": "heapq模块", "url": "/posts/heapq/", "categories": "Python, 标准库", "tags": "Python标准库", "date": "2018-06-17 20:22:11 +0800", "snippet": "heapq模块— 堆队列算法这个模块提供了堆队列算法的实现，也称为优先队列算法。要创建一个堆，可以使用list来初始化为 [] ，或者你可以通过一个函数 heapify() ，来把一个list转换成堆。heapq.heappush(heap, item)将 item 的值加入 heap 中，保持堆的不变性。heapq.heappop(heap)弹出并返回 heap 的最小的元素，保持堆的不变性。如果堆为空，抛出 IndexError 。使用 heap[0] ，可以只访问最小的元素而不弹出它。heapq.heappushpop(heap, item)将 item 放入堆中，然后弹出并返回 ..." }, { "title": "进程·线程·协程", "url": "/posts/process-thread-coroutine/", "categories": "计算机基础", "tags": "网络通信, 计算机基础, Python进阶", "date": "2018-06-04 21:26:44 +0800", "snippet": "多任务编程多任务执行方式有两种方式：并发和并行并发指的是任务数多余cpu核数，通过操作系统的各种任务调度算法，实现用多个任务“一起”执行（实际上总有一些任务不在执行，因为切换任务的速度相当快，看上去一起执行而已）并行指的是任务数小于等于cpu核数，即任务真的是一起执行的多任务-进程进程是操作系统进行资源分配的基本单位，一个程序运行后至少有一个进程，一个进程默认有一个线程，进程里面可以创建多个线程，线程是依附在进程里面的，没有进程就没有线程。Process进程类的说明1.Process([group [, target [, name [, args [, kwargs]]]]]) ..." }, { "title": "imghdr模块", "url": "/posts/imghdr/", "categories": "Python, 标准库", "tags": "Python标准库", "date": "2018-05-27 19:58:23 +0800", "snippet": "imghdr模块imghdr 模块推测文件或字节流中的图像的类型image header 图片文件头信息: 文件系统中的每个文件二进制的前几位是用来保存文件类型的. linux文件系统中 不是用后缀名来判断文件类型的，（与windows不一样的地方）linux系统中 文件后缀名仅仅是为了看起来方便而已imghdr.what(filename, h=None) 测试包含在命名为 filename 的文件对象中的图像数据，并且返回描述此类图片的字符串(文件格式),如果没有则返回 None。如果可选的 h 被提供， filename 将被忽略并且 h 包含将被测试的二进制流。 ​ ..." }, { "title": "RPC远程调用程序", "url": "/posts/rpc/", "categories": "Web开发技术", "tags": "Web开发技术, RPC", "date": "2018-05-22 23:16:34 +0800", "snippet": "RPC简介1. 什么是RPC远程过程调用（英语：Remote Procedure Call，缩写为 RPC，也叫远程程序调用）是一个计算机通信协议。该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程。如果涉及的软件采用面向对象编程，那么远程过程调用亦可称作远程调用或远程方法调用。2. 背景与用途在单台计算机中，我们可以通过程序调用来传递控制和数据；或者说通过程序调用，我们可以将多个程序组成一个整体来实现某个功能。如果将这种调用机制推广到多台彼此间可以进行网络通讯的计算机，由多台计算机中的多个程序组成一个整体来实现某个功能，这也是可以的。调用的一..." }, { "title": "itertools模块", "url": "/posts/itertools/", "categories": "Python, 标准库", "tags": "Python标准库", "date": "2018-05-21 20:08:47 +0800", "snippet": "itertools模块itertools模块包含创建有效迭代器的函数，可以用各种方式对数据进行循环操作，此模块中的所有函数返回的迭代器都可以与for循环语句以及其他包含迭代器（如生成器和生成器表达式）的函数联合使用无穷迭代器itertools.count(start=0, step=1) 创建一个无穷迭代器，它从 start 值开始，返回均匀间隔的值。常用于 map() 中的实参来生成连续的数据点。此外，还用于 zip() 来添加序列号 count(10) --&amp;gt; 10 11 12 13 14 ...itertools.cycle(iterable) 创建..." }, { "title": "编辑器之神- vim", "url": "/posts/vim/", "categories": "生产工具", "tags": "生产工具", "date": "2018-05-18 21:33:12 +0800", "snippet": "vi简介vi是“Visual interface”的简称，它在Linux上的地位就仿佛Edit程序在DOS上一样。它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且用户可以根据自己的需要对其进行定制。Vi不是一个排版程序，它不象Word或WPS那样可以对字体、格式、段落等其他属性进行编排，它只是一个文本编辑程序。 vi没有菜单，只有命令，且命令繁多。Vi有三种基本工作模式：+ 命令模式+ 文本输入模式+ 末行模式。 命令行模式任何时候，不管用户处于何种模式，只要按一下ESC键，即可使Vi进入命令模式；我们在shell环境(提示符为$)下输入启动Vi命令，进入编辑器时，也是..." }, { "title": "JWT认证机制", "url": "/posts/jwt/", "categories": "Web开发技术", "tags": "Web开发技术, JWT认证", "date": "2018-05-10 23:47:26 +0800", "snippet": "JWT认证机制session认证机制我们知道，http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie,以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了,这就是传统的基于session认证。但是这种基于session的认证使应用本身很难得到扩展，随着不同客户端用户的增..." }, { "title": "迭代器和生成器", "url": "/posts/iterable-iterator/", "categories": "Python, Python进阶", "tags": "Python进阶", "date": "2018-05-05 20:23:49 +0800", "snippet": "迭代器可以直接作用于for循环的对象统称为可迭代对象：Iterable可以使用isinstance()判断一个对象是否是Iterable对象In [50]: from collections import IterableIn [51]: isinstance([], Iterable)Out[51]: True In [55]: isinstance(100, Iterable)Out[55]: False可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator可以使用isinstance()判断一个对象是否是Iterator对象In [56]: from ..." }, { "title": "with语句和上下文管理器", "url": "/posts/with-context/", "categories": "Python, Python进阶", "tags": "Python进阶", "date": "2018-04-30 19:48:26 +0800", "snippet": "任何实现了 __enter__() 和 __exit__() 方法的对象都可称之为上下文管理器，上下文管理器对象可以使用 with 关键字。__enter__() 方法返回资源对象，这里就是你将要打开的那个文件对象，__exit__() 方法处理一些清除工作。class File(): def __init__(self, filename, mode): self.filename = filename self.mode = mode def __enter__(self): print(&quot;entering&quot;)..." }, { "title": "Redis基础-主从复制,哨兵,集群", "url": "/posts/redis-4/", "categories": "数据库, Redis", "tags": "Redis", "date": "2018-04-22 20:16:33 +0800", "snippet": "主从复制主从概念 ⼀个 master 可以拥有多个 slave，⼀个 slave ⼜可以拥有多个 slave，如此下去，形成了强⼤的多级服务器集群架构 master 用来写数据，slave 用来读数据，经统计：网站的读写比率是10:1 通过主从配置可以实现读写分离 master 和 slave 都是一个 redis 实例( redis 服务)配置主从​ 1.slaveof host port 指定当前redis为host:port下的redis的从机​ 2.配置文件指定从属于哪一台主服务器查看主从信息 info replication说明 1.从 Redi..." }, { "title": "Redis基础-持久化", "url": "/posts/redis-3/", "categories": "数据库, Redis", "tags": "Redis", "date": "2018-04-19 19:38:19 +0800", "snippet": "持久化(persistence)redis可以将数据写入到磁盘中，在停机或宕机后，再次启动redis时，将磁盘中的备份数据加载到内存中恢复使用。这是redis的持久化RDB 快照持久化 RDB 持久化可以在指定的时间间隔内生成数据集的时间点快照（point-in-time snapshot），在进行持久化时，redis会创建子进程来执行。 redis默认开启了快照持久化机制进行快照持久化的时机 1.定期触发 # save N M “ N 秒内数据集至少有 M 个改动”这一条件被满足时， 自动保存一次数据集。 2.BGSAVE # 执行BGSAVE命令..." }, { "title": "Redis基础-事务，缓存有效期，淘汰策略", "url": "/posts/redis-2/", "categories": "数据库, Redis", "tags": "Redis", "date": "2018-04-16 20:50:41 +0800", "snippet": "Redis事务MULTI 、 EXEC 、 DISCARD 和 WATCH 是 Redis 事务的基础。事务可以一次执行多个命令， 并且带有以下两个重要的保证： 事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。 事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。Redis提供了一定的事务支持，可以保证一组操作原子执行不被打断，但是如果执行中出现错误，事务不能回滚，Redis未提供回滚支持。MULTI 命令用于开启一个事务，它总是返回 OK 。 使用multi开启事务后，操作的指令并未立即..." }, { "title": "Redis基础-数据操作常用命令", "url": "/posts/redis-1/", "categories": "数据库, Redis", "tags": "Redis", "date": "2018-04-13 21:34:07 +0800", "snippet": "Redis介绍简介： Redis 是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。特点： Redis 支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用. Redis 不仅仅支持简单的key-value类型的数据，同时还提供 list，set，zset，hash 等数据结构的存储. Redis 支持数据的备份，即master-slave模式的数据备份.优势： 性能极高 – Redis 能读的速度是 110000次/s, 写的速度是 81000次/s 丰富的数据类型 –..." }, { "title": "MySQL基础-关于优化", "url": "/posts/mysql-8/", "categories": "数据库, MySQL", "tags": "MySQL", "date": "2018-04-10 22:13:45 +0800", "snippet": "SQL查询优化 避免全表扫描，应考虑在 where 及 order by 涉及的列上建立索引； 查询时使用select明确指明所要查询的字段，避免使用select *的操作； SQL语句尽量大写，如 SELECT name FROM t WHERE id=1 对于小写的sql语句，通常数据库在解析sql语句时，通常会先转换成大写再执行。 尽量避免在 where 子句中使用!=或&amp;lt;&amp;gt;操作符， MySQL只有对以下操作符才使用索引：&amp;lt;，&amp;lt;=，=，&amp;g..." }, { "title": "MySQL基础-数据库引擎", "url": "/posts/mysql-7/", "categories": "数据库, MySQL", "tags": "MySQL", "date": "2018-04-07 22:44:24 +0800", "snippet": "数据库存储引擎是数据库底层软件组织，数据库管理系统（DBMS）使用数据引擎进行创建、查询、更新和删除数据。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎，还可以 获得特定的功能。现在许多不同的数据库管理系统都支持多种不同的数据引擎。MySQL的核心就是存储引擎。SHOW ENGINES # 命令来查看MySQL提供的引擎SHOW VARIABLES LIKE &#39;storage_engine&#39;; # 查看数据库默认使用哪个引擎InnoDBInnoDB是事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键，InnoDB是默认的..." }, { "title": "MySQL基础-索引", "url": "/posts/mysql-6/", "categories": "数据库, MySQL", "tags": "MySQL", "date": "2018-04-02 22:16:56 +0800", "snippet": "在MySQL中也叫做“键”，它是一个特殊的文件，它是要占据物理空间的, 它保存着数据表里所有记录的位置信息，更通俗的来说，数据库索引好比是一本书前面的目录，能加快数据库的查询速度，但减慢增删改速度。主键列会自动创建索引, 索引的实现通常使用B树及其变种B+树。为什么减慢增删改速度由于索引需要额外的维护成本，因为索引文件是单独存在的文件,所以当我们对数据的增加,修改,删除,都会产生额外的对索引文件的操作,这些操作需要消耗额外的IO,会降低增/改/删的执行效率索引有哪些优缺点？索引的优点 可以大大加快数据的检索速度，这也是创建索引的最主要的原因。 通过使用索引，可以在查询的过程中，使用优..." }, { "title": "MySQL基础-主从同步与读写分离", "url": "/posts/mysql-5/", "categories": "数据库, MySQL", "tags": "MySQL", "date": "2018-03-30 21:38:43 +0800", "snippet": "复制集与分布式 复制集（Replication） 数据库中数据相同，起到备份作用 高可用 High Available HA 分布式（Distribution） 数据库中数据不同，共同组成完整的数据集合 通常每个节点被称为一个分片（shard) 高吞吐 High Throughput 复制集与分布式可以单独使用，也可以组合使用（即每个分片都组建一个复制集） 关于主（Master）从（Slave） 这个概念是从使用的角度来阐述问题的 主节点 -&amp;gt; 表示..." }, { "title": "MySQL基础-事务", "url": "/posts/mysql-4/", "categories": "数据库, MySQL", "tags": "MySQL", "date": "2018-03-27 21:55:17 +0800", "snippet": "事务的概念事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行的结果必须使数据库从一种一致性状态变到另一种一致性状态。事务就是用户定义的一系列执行SQL语句的操作, 这些操作要么完全地执行，要么完全地都不执行， 它是一个不可分割的工作执行单元。事务的四大特性 原子性(Atomicity) 一致性(Consistency) 隔离性(Isolation) 持久性(Durability)原子性:一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作，这就是事务的原子性一致性..." }, { "title": "MySQL基础-查询优化\三范式\python交互", "url": "/posts/mysql-3/", "categories": "数据库, MySQL", "tags": "MySQL", "date": "2018-03-24 22:17:46 +0800", "snippet": "SQL查询优化 避免全表扫描，应考虑在 where 及 order by 涉及的列上建立索引； 查询时使用select明确指明所要查询的字段，避免使用select *的操作； SQL语句尽量大写，如 SELECT name FROM t WHERE id=1 对于小写的sql语句，通常数据库在解析sql语句时，通常会先转换成大写再执行。 尽量避免在 where 子句中使用!=或&amp;lt;&amp;gt;操作符， MySQL只有对以下操作符才使用索引：&amp;lt;，&amp;lt;=，=，&amp;g..." }, { "title": "MySQL基础-常用SQL语句", "url": "/posts/mysql-2/", "categories": "数据库, MySQL", "tags": "MySQL", "date": "2018-03-21 22:34:12 +0800", "snippet": "登录和登出数据库# 登录数据库mysql -u[用户名] -p[密码] -h [主机名] -P[端口号] -u 后面是登录的用户名 -p 后面是登录密码, 如果不填写, 回车之后会提示输入密码 # 显示当前时间select now();# 登出(退出)数据库quit 或 exit 或 ctrl + d数据库操作# 查看所有数据库show databases;# 显示授予用户（所有用户或特定用户）的安全权限show grants# 显示服务器错误或警告消息SHOW ERRORSSHOW WARNINGS# 显示服务器状态信息SHOW STATUS# 查看创库SQL语句sh..." }, { "title": "MySQL基础-数据类型及约束", "url": "/posts/mysql-1/", "categories": "数据库, MySQL", "tags": "MySQL", "date": "2018-03-18 22:26:21 +0800", "snippet": "介绍MySQL是一个关系型数据库管理系统，在 WEB 应用方面，MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件，它是由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品，MySQL 是最流行的关系型数据库管理系统中的一个。默认端口号：3306MySQL的特点: 是开源的，不需要支付额外的费用。 支持大型的数据库。可以处理拥有上千万条记录的大型数据库。 使用标准的SQL数据语言形式。 支持多种操作系统，并且提供多种编程语言的操作接口。这些编程语言包括C、C++、Python、..." }, { "title": "元类", "url": "/posts/meta-class/", "categories": "Python, Python基础", "tags": "Python基础", "date": "2018-03-09 18:57:32 +0800", "snippet": "使用type创建类type还有一种完全不同的功能，动态的创建类。type可以接受一个类的描述作为参数，然后返回一个类。（要知道，根据传入参数的不同，同一个函数拥有两种完全不同的用法是一件很傻的事情，但这在Python中是为了保持向后兼容性）type可以像这样工作：type(类名, 由父类名称组成的元组(针对继承的情况，可以为空)，包含属性的字典(名称和值))# 示例class A(object): num = 100def print_b(self): &quot;&quot;&quot;准备的实例方法&quot;&quot;&quot; print(self.num)..." } ]
